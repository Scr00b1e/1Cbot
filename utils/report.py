import requests 
import pandas as pd

from utils.header import get_headers
from config import FETCHURL, SENDURL, REPORTURL, CASHURL, ADDURL

headers = get_headers()

def fetch_json():
    url = FETCHURL

    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            try:
                data = response.json()
                if isinstance(data, dict):
                    data = [data]
                elif not isinstance(data, list):
                    return f"‚ö†Ô∏è –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫, –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: `{type(data).__name__}`\n\n```{data}```"

                return data
            except Exception as e:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: {str(e)}\n\n–û—Ç–≤–µ—Ç –æ—Ç 1–°:\n{response.text}"
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç 1–°: {response.status_code}\n\n{response.text}"
    except Exception as e:
        return f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ 1–°:\n{str(e)}"

def send_stock(stock_name):
    url = SENDURL

    response = requests.post(url, headers=headers, json={"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": stock_name})
    if response.status_code == 200:
        try:
            data = response.json()
            if isinstance(data, dict):
                data = [data]
            elif not isinstance(data, list):
                return f"‚ö†Ô∏è –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫, –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: `{type(data).__name__}`\n\n```{data}```"

            df = pd.DataFrame(data)

            required_columns = ["–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–°—É–º–º–∞"]
            for col in required_columns:
                if col not in df.columns:
                    df[col] = ""
                
            df = df[required_columns]

            table = "üìã *–û—Ç—á—ë—Ç –∏–∑ 1–°:*\n"
            table += "```\n"
            table += df.to_string(index=False)
            table += "\n```"

            return table

        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: {str(e)}\n\n–û—Ç–≤–µ—Ç –æ—Ç 1–°:\n{response.text}"
    else:
        return f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç 1–°: {response.status_code}\n\n{response.text}"


def get_report1c():
    url = REPORTURL

    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            try:
                data = response.json()
                if isinstance(data, dict):
                    data = [data]
                elif not isinstance(data, list):
                    return f"‚ö†Ô∏è –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫, –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: `{type(data).__name__}`\n\n```{data}```"

                df = pd.DataFrame(data)

                required_columns = ["–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π–°—á–µ—Ç", "–°—É–º–º–∞", "–°—É–º–º–∞–í–∞–ª"]
                for col in required_columns:
                    if col not in df.columns:
                        df[col] = ""
                
                df = df[required_columns]

                table = "üìã *–û—Ç—á—ë—Ç –∏–∑ 1–°:*\n"
                table += "```\n"
                table += df.to_string(index=False)
                table += "\n```"

                return table

            except Exception as e:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: {str(e)}\n\n–û—Ç–≤–µ—Ç –æ—Ç 1–°:\n{response.text}"
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç 1–°: {response.status_code}\n\n{response.text}"

    except Exception as e:
        return f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ 1–°:\n{str(e)}"


def get_cash1c():
    url = CASHURL

    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            try:
                data = response.json()
                if isinstance(data, dict):
                    data = [data]
                elif not isinstance(data, list):
                    return f"‚ö†Ô∏è –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫, –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: `{type(data).__name__}`\n\n```{data}```"

                df = pd.DataFrame(data)

                required_columns = ["–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–ö–∞—Å—Å–∞", "–°—É–º–º–∞", "–°—É–º–º–∞–í–∞–ª"]
                for col in required_columns:
                    if col not in df.columns:
                        df[col] = ""
                
                df = df[required_columns]

                table = "üìã *–û—Ç—á—ë—Ç –∏–∑ 1–°:*\n"
                table += "```\n"
                table += df.to_string(index=False)
                table += "\n```"

                return table

            except Exception as e:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: {str(e)}\n\n–û—Ç–≤–µ—Ç –æ—Ç 1–°:\n{response.text}"
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç 1–°: {response.status_code}\n\n{response.text}"

    except Exception as e:
        return f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ 1–°:\n{str(e)}"
    
#add stock
def add_stock():
    url = ADDURL

    try:
        response = requests.post(url, headers=headers)
        if response.status_code == 200:
            try:
                data = response.json()
                if isinstance(data, dict):
                    data = [data]
                elif not isinstance(data, list):
                    return f"‚ö†Ô∏è –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫, –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: `{type(data).__name__}`\n\n```{data}```"

                df = pd.DataFrame(data)

                required_columns = ["–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è–ï–¥–∏–Ω–∏—Ü–∞", "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞", "–°—É–º–º–∞"]
                for col in required_columns:
                    if col not in df.columns:
                        df[col] = ""
                
                df = df[required_columns]

                table = "üìã *–û—Ç—á—ë—Ç –∏–∑ 1–°:*\n"
                table += "```\n"
                table += df.to_string(index=False)
                table += "\n```"

                return table

            except Exception as e:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: {str(e)}\n\n–û—Ç–≤–µ—Ç –æ—Ç 1–°:\n{response.text}"
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç 1–°: {response.status_code}\n\n{response.text}"

    except Exception as e:
        return f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ 1–°:\n{str(e)}"